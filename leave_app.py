# file: leave_app.py

import streamlit as st
import pandas as pd
from fpdf import FPDF
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from io import BytesIO
import json

# --- Google Sheets Setup ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("EmployeeLeaveRecords").worksheet("Records")
name_sheet = client.open("EmployeeLeaveRecords").worksheet("EmployeeNames")

# --- Helper Functions ---
def get_employee_names():
    names = [row[0] for row in name_sheet.get_all_values()[1:] if row and row[0]]
    return ["-‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å-"] + names

def get_remaining_leave_by_type(name):
    df = pd.DataFrame(sheet.get_all_records())
    person_df = df[df['‡∏ä‡∏∑‡πà‡∏≠'] == name].copy()
    person_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤'] = pd.to_numeric(person_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤'], errors='coerce')
    totals = {'‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô': 10, '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢': 30, '‡∏•‡∏≤‡∏Å‡∏¥‡∏à': 6}
    used = person_df.groupby('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤'].sum().to_dict()
    remaining = {k: totals[k] - used.get(k, 0) for k in totals}
    return remaining

def get_latest_leave(name):
    df = pd.DataFrame(sheet.get_all_records())
    person_df = df[df['‡∏ä‡∏∑‡πà‡∏≠'] == name]
    if person_df.empty:
        return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤"
    return person_df.iloc[-1].to_dict()

def get_leave_history_filtered(name, year, month):
    df = pd.DataFrame(sheet.get_all_records())
    df = df[df['‡∏ä‡∏∑‡πà‡∏≠'] == name].copy()
    df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°'], errors='coerce')
    df = df.dropna(subset=['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°'])
    df = df[df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°'].dt.year == year]
    if month != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        df = df[df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°'].dt.month == int(month)]
    return df

def calculate_leave_days(start, end, type_leave, start_time=None, end_time=None):
    if type_leave == "‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á":
        fmt = "%H:%M"
        time_start = datetime.datetime.strptime(start_time, fmt)
        time_end = datetime.datetime.strptime(end_time, fmt)
        hours = (time_end - time_start).seconds / 3600
        return round(hours / 8, 2)
    elif "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in type_leave:
        return 0.5
    return (end - start).days + 1

def create_pdf(data):
    def thai_date(date_str):
        months = ["", "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"]
        dt = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        return f"{dt.day} {months[dt.month]} {dt.year + 543}"

    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("THSarabunNew", "", "./font/THSarabunNew.ttf", uni=True)
    pdf.set_font("THSarabunNew", size=16)

    pdf.image("./logo/logo.jpeg", x=(210 - 30) / 2, y=10, w=30)
    pdf.ln(40)

    pdf.set_font_size(18)
    pdf.cell(0, 10, "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡∏µ‡πÑ‡∏≠ ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î", ln=True, align="C")
    pdf.set_font_size(12)
    pdf.cell(0, 10, "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ln=True, align="C")

    pdf.set_font_size(16)
    pdf.cell(0, 10, "‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏á‡∏≤‡∏ô", ln=True, align="C")
    pdf.set_draw_color(0, 0, 0)
    pdf.line(10, pdf.get_y() + 1, 200, pdf.get_y() + 1)
    pdf.set_text_color(0, 0, 0)
    pdf.ln(15)

    pdf.set_font_size(16)
    col_width = 50
    for key, value in data.items():
        if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" in key and value:
            try:
                value = thai_date(value)
            except:
                pass
        pdf.set_fill_color(230, 230, 230)
        pdf.cell(col_width, 10, key, border=1, fill=True)
        if key == "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•":
            pdf.multi_cell(0, 10, str(value), border=1)
        else:
            pdf.cell(0, 10, str(value), border=1, ln=True)

    pdf.ln(20)
    pdf.cell(0, 10, "‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠.......................................................", ln=True, align="R")
    pdf.cell(0, 10, "(‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏•‡∏≤)", ln=True, align="R")
    pdf.ln(15)
    pdf.cell(0, 10, "‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠.......................................................", ln=True, align="R")
    pdf.cell(0, 10, "(‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)", ln=True, align="R")

    pdf_output = BytesIO()
    pdf.output(pdf_output)
    pdf_output.seek(0)
    return pdf_output

def save_to_sheet(data):
    sheet.append_row(list(data.values()))

# Expand sidebar width using HTML style
st.markdown("""
<style>
    section[data-testid="stSidebar"] {
        width: 400px !important;
    }
</style>
""", unsafe_allow_html=True)

# --- Sidebar Section: Leave History Viewer ---
st.sidebar.title("üìÅ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤")
names = get_employee_names()
sidebar_name = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", names, key="sidebar_name")

if sidebar_name != "-‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å-":
    st.sidebar.markdown("---\n### üìä ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
    remaining_by_type = get_remaining_leave_by_type(sidebar_name)
    for leave_type, days_left in remaining_by_type.items():
        st.sidebar.write(f"{leave_type}: {days_left} ‡∏ß‡∏±‡∏ô")

    st.sidebar.markdown("---\n### üìå ‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    latest = get_latest_leave(sidebar_name)
    if isinstance(latest, dict):
        keys_to_show = ["‡∏ä‡∏∑‡πà‡∏≠", "‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", "‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤", "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"]
        for key in keys_to_show:
            if key in latest:
                st.sidebar.write(f"{key}: {latest[key]}")
    else:
        st.sidebar.write(latest)

    st.sidebar.markdown("---\n### üóìÔ∏è ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
    this_year = datetime.datetime.now().year
    years = list(range(this_year - 5, this_year + 1))
    months = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + [str(i) for i in range(1, 13)]
    selected_year = st.sidebar.selectbox("‡∏õ‡∏µ", years[::-1])
    selected_month = st.sidebar.selectbox("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", months)

    history_df = get_leave_history_filtered(sidebar_name, selected_year, selected_month)
    if not history_df.empty:
        st.sidebar.dataframe(history_df)
    else:
        st.sidebar.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤")

# --- Main Section: Leave Form ---

st.markdown(
    """
    <div style='color:red; font-size:16px; font-weight:bold;'>
    ***‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç***<br>
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÄ‡πÄ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÄ‡πÄ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    </div>
    """,
    unsafe_allow_html=True
)
st.title("üìù ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤")
‡∏ä‡∏∑‡πà‡∏≠ = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠", names, key="main_name")
‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô = st.radio("‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô", ["‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏±‡∏ô", "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ä‡πâ‡∏≤", "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ö‡πà‡∏≤‡∏¢", "‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"])
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤", ["‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à"])
start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°")
end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
reason = st.text_area("‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤")

start_time = end_time = ""
if ‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô == "‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á":
    start_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤", value=datetime.time(8, 30)).strftime("%H:%M")
    end_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏≤", value=datetime.time(17, 30)).strftime("%H:%M")
else:
    if ‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô == "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ä‡πâ‡∏≤":
        start_time, end_time = "08:30", "12:00"
    elif ‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô == "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ö‡πà‡∏≤‡∏¢":
        start_time, end_time = "13:00", "17:30"
    else:
        start_time, end_time = "08:30", "17:30"

is_valid = True
if ‡∏ä‡∏∑‡πà‡∏≠ == "-‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å-":
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°")
    is_valid = False

if start_date < datetime.date.today():
    st.warning("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï")
    is_valid = False

if end_date < start_date:
    st.warning("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°")
    is_valid = False

if ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ == "‡∏•‡∏≤‡∏Å‡∏¥‡∏à" and (start_date - datetime.date.today()).days < 3:
    st.warning("‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏•‡∏≤‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ß‡∏±‡∏ô")
    is_valid = False

if is_valid and st.button("‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°"):
    leave_days = calculate_leave_days(start_date, end_date, ‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô, start_time, end_time)

    submission = {
        "‡∏ä‡∏∑‡πà‡∏≠": ‡∏ä‡∏∑‡πà‡∏≠,
        "‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô": ‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô,
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤": ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤,
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°": str(start_date),
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î": str(end_date),
        "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤": start_time,
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏≤": end_time,
        "‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤": leave_days,
        "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•": reason,
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

    save_to_sheet(submission)
    pdf = create_pdf(submission)
    st.success("‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    filename = f"leave_form_{submission['‡∏ä‡∏∑‡πà‡∏≠']}_{submission['‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á'].replace(':', '').replace(' ', '_')}.pdf"
    st.download_button(label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° PDF", data=pdf, file_name=filename)
